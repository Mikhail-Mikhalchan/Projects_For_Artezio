
Рассмотрю применение принципов ООП на примере своей курсовой работы на тему "База данных учета товара на складе"(MS SQL и С#).
---------------------------
1. Реализация инскапсуляции
---------------------------
Как я изучил ранее, принцип инкапсуляции применяется для сокрытия данных. Принцип таковой - с помощью спецификатора private можно ограничить доступ к данным, они будут доступны только внутри данного класса, с помощью спецификатора protected можно ограничить доступ внутри данного класса и классов наследников.
* Чаще всего в своей курсовой я скрывал данные, а методы, в которых использовались данные делал со спецификатором - public, такой способ позволяет пользователю использовать методы и не допускает изменение и пользование данным класса. 
* Также иногда я скрывал и методы, тк они были предназначены для какой-либо скрытой обработки данных, и такие методы, по моему мнению, не предназначены для использования пользователями класса.
---------------------------
2. Реализация наследования 
---------------------------
Опять же, как я изучал ранее принцип наследования предназначен для сокращения кода и для множественного использования одного класса.
* В основном принцип наследования я применял для элементов интерфейса. Например, мое приложение выдержано в одном стиле, для этого я создавал базовый класс какго-либо элемента, например, кнопки - StyleButton, в нем создавал основные параметры для других кнопок(Шрифт, Цвет, форма кнопки, события и тд). Если в каком-либо разделе моего приложения кнопки должны были обладать большим числом параметром или вообще немного другими параметрами, я создавал дочерний от класса StyleBUtton класс, в котором уже содержались основные - базовые параметры кнопки, и к ним дописывал уже новые специфичные для раздела параметры, события.
---------------------------
3. Реализация полиморфизма
---------------------------
Принцип полиморфизма предназначен для использования одного имени в множестве похожих задач.
* Полиморфизм в своей курсовой использовал один раз. Этот принцип реализовал с помощью виртуальной функции: когда значение комбобокс становилось "Выполнен", срабатывал метод StatusCompleted, который активировал три одноименных метода в дочерних классах, эти методы имели немного разное предназначение, один блокировал доступ к выполненным заказам, другой предназначен для формирования некой статистики.

У меня нет большого опыта в использования приципов ООП, но я понимаю какую пользу они несут, и организация кода по принципам ООП это инетресная задача, тк нужно не бить в лоб, а придумывать реальное оптимальный способ использования того или иного объекта.
